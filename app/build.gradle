apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply from: '../api.gradle'
apply from: '../dependencies.gradle'

android {

    def versionMajor = 0
    def versionMinor = 0
    def versionPatch = 1
    def versionBuild = 1

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode versionMajor * 10**4 + versionMinor * 10**3 + versionPatch * 10**2 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "BASE_API_URL", "\"$BASE_API_URL\""

    }

    signingConfigs {
        release {
            try {
                storeFile file("/keystore/itarticles.jks")
                storePassword KEYSTORE_PASSWORD
                keyAlias "default"
                keyPassword KEY_PASSWORD
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and" +
                        " KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix " Debug"
            testCoverageEnabled = true
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

}

dependencies {
    def daggerCompiler = "com.google.dagger:dagger-compiler:$daggerVersion"

    // Support
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:support-annotations:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    // Retrofit
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$retrofitRxJavaAdapter"
    compile("com.squareup.retrofit2:converter-simplexml:$retrofitVersion") {
        // https://github.com/square/retrofit/tree/master/retrofit-converters/simplexml
        // exclude the following transitive dependencies: stax:stax-api, stax:stax, and xpp3:xpp3
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    // RX
    compile "io.reactivex.rxjava2:rxjava:$rxJava2"
    compile "io.reactivex.rxjava2:rxandroid:$rxAndroid"
    compile "com.jakewharton.rxbinding2:rxbinding:$rxBindings"
    // Timber
    compile "com.jakewharton.timber:timber:$timberVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okHttpLoggingVersion"
    // Butter knife
    compile "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    // Dagger
    compile "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor daggerCompiler
    testAnnotationProcessor daggerCompiler
    androidTestAnnotationProcessor daggerCompiler
    // Date Time
    compile "joda-time:joda-time:$jodaTimeVersion"
    // UI
    compile "uk.co.chrisjenx:calligraphy:$calligraphyVersion"
    compile "com.facebook.fresco:fresco:$frescoVersion"
    //EventBus
    compile "org.greenrobot:eventbus:$eventBusVersion"
    //LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Tests
    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.robolectric:robolectric:$robolectricVersion"

    provided 'org.glassfish:javax.annotation:10.0-b28'
}
